/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codigo;

import java.awt.EventQueue;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.Color;

/**
 *
 * @author arigo01
 */
public class App extends javax.swing.JFrame {

    /**
     * Creates new form App
     */
    public App() {
        initComponents();
        setBackground(Color.BLACK);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtxta_cf = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtxta_resultado = new javax.swing.JTextArea();
        Analisar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        label1.setText("label1");

        label2.setText("label2");

        jLabel4.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 255, 153));
        setForeground(new java.awt.Color(51, 255, 255));
        getContentPane().setLayout(null);

        jScrollPane3.setBackground(new java.awt.Color(51, 255, 255));

        jtxta_cf.setColumns(20);
        jtxta_cf.setRows(5);
        jScrollPane3.setViewportView(jtxta_cf);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(130, 300, 905, 110);

        jtxta_resultado.setColumns(20);
        jtxta_resultado.setRows(5);
        jScrollPane4.setViewportView(jtxta_resultado);

        getContentPane().add(jScrollPane4);
        jScrollPane4.setBounds(130, 490, 910, 110);

        Analisar.setBackground(new java.awt.Color(255, 255, 255));
        Analisar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Analisar.setText("Analisar");
        Analisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnalisarActionPerformed(evt);
            }
        });
        getContentPane().add(Analisar);
        Analisar.setBounds(130, 430, 90, 25);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Codigo Fonte:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(130, 270, 150, 17);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Resultado:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(130, 460, 80, 30);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("ANALISADOR LÉXICO");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(530, 180, 180, 41);

        jLabel6.setIcon(new javax.swing.ImageIcon("C:\\Users\\richa\\OneDrive\\Área de Trabalho\\uscs-logo.png")); // NOI18N
        getContentPane().add(jLabel6);
        jLabel6.setBounds(560, 110, 100, 73);

        jButton1.setText("Limpar Tudo");
        jButton1.setToolTipText("");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(950, 640, 91, 23);

        jLabel7.setIcon(new javax.swing.ImageIcon("C:\\Users\\richa\\OneDrive\\Área de Trabalho\\desktop wallpaper wallpaper removal contractors.png")); // NOI18N
        jLabel7.setText("jLabel7");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(21, 88, 1140, 650);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AnalisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnalisarActionPerformed
        // TODO add your handling code here:

        try {
            this.startLexer();
        } catch (IOException ioex) {
            System.out.println(ioex.getMessage());
        }


    }//GEN-LAST:event_AnalisarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jtxta_cf.setText("");
        jtxta_resultado.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public void startLexer() throws IOException {
        File arquivo = new File("fonte.smm");
        PrintWriter writer;
        try {
            writer = new PrintWriter(arquivo);
            writer.print(jtxta_cf.getText());
            writer.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
        Reader reader = new BufferedReader(new FileReader("fonte.smm"));
        Lexer lexer = new Lexer(reader);
        String resultado = "";
        while (true) {
            Tokens token = lexer.yylex();
            System.out.println(token + "\n");
            if (token == null) {
                resultado += "<EOF>";
                jtxta_resultado.setText(resultado);
                return;
            }
            switch (token) {
                case ERROR:
                    resultado += "Simbolo não reconhecido: " + token + " " + lexer.lexema + "\n";
                    break;
                case RESERVADA:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case INT_CONSTANTE:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case STRING_CONSTANTE:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case SOMA:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case SUBTRACAO:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case DIVISAO:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case MULTIPLICACAO:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case IGUAL:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case MENOR:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case MAIOR:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case MENOR_IGUAL:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case IGUAL_MENOR:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case MAIOR_IGUAL:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case IGUAL_MAIOR:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case DIFERENTE:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case PONTO_E_VIRGULA:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case IDENTIFICADOR:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                     break;
                case ATRIBUICAO:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case ABRE_PARENTESES:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case FECHA_PARENTESES:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case FECHA_CHAVES:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case ABRE_CHAVES:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case FECHA_VETOR:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case ABRE_VETOR:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case E_COMERCIAL:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case PONTO:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case VIRGULA:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case INCREMENTO:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case PIPE:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case BARRA_INVERTIDA:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case TIL:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case HASHTAG:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case ARROBA:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case CRASE:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case UNDERLINE:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case EXCLAMACAO:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case RETICENCIAS:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                case BREAK:
                    resultado += "Token: " + token + " -> " + lexer.yytext() + "\n";
                    break;
                default:
                    resultado += "Simbolo não reconhecido: " + token + " " + lexer.lexema + "\n";
            }
        }

    }

    // Variables declaration - do not modify                     
    // End of variables declaration                   
    public static void main(String[] args) {
        EventQueue.invokeLater(() -> {
            try {
                App frame = new App();
                frame.setSize(1024, 758);
                frame.setVisible(true);
                frame.setLocationRelativeTo(null);
            } catch (Exception e) {
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Analisar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jtxta_cf;
    private javax.swing.JTextArea jtxta_resultado;
    private java.awt.Label label1;
    private java.awt.Label label2;
    // End of variables declaration//GEN-END:variables
}
